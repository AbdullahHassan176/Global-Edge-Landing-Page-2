// Report generation utilities for PDF and CSV downloads

export interface ReportData {
  title: string;
  generatedAt: string;
  data: any[];
  summary?: {
    totalValue?: number;
    totalInvestments?: number;
    averageReturn?: number;
    riskLevel?: string;
  };
}

export class ReportGenerator {
  // Generate CSV content
  static generateCSV(data: any[], headers: string[]): string {
    const csvHeaders = headers.join(',');
    const csvRows = data.map(row => 
      headers.map(header => {
        const value = row[header.toLowerCase().replace(/\s+/g, '_')] || row[header] || '';
        // Escape commas and quotes in CSV
        return typeof value === 'string' && (value.includes(',') || value.includes('"')) 
          ? `"${value.replace(/"/g, '""')}"` 
          : value;
      }).join(',')
    );
    
    return [csvHeaders, ...csvRows].join('\n');
  }

  // Generate PDF content (simplified HTML-based approach)
  static generatePDF(data: ReportData): string {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${data.title}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #1f2937; }
          .subtitle { font-size: 14px; color: #6b7280; margin-top: 5px; }
          .summary { background: #f3f4f6; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
          .summary-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; }
          .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
          .summary-item { background: white; padding: 15px; border-radius: 6px; }
          .summary-label { font-size: 12px; color: #6b7280; text-transform: uppercase; }
          .summary-value { font-size: 20px; font-weight: bold; color: #1f2937; margin-top: 5px; }
          .data-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          .data-table th, .data-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }
          .data-table th { background: #f9fafb; font-weight: bold; color: #374151; }
          .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">${data.title}</div>
          <div class="subtitle">Generated on ${new Date(data.generatedAt).toLocaleDateString()}</div>
        </div>
        
        ${data.summary ? `
        <div class="summary">
          <div class="summary-title">Summary</div>
          <div class="summary-grid">
            ${data.summary.totalValue ? `
              <div class="summary-item">
                <div class="summary-label">Total Value</div>
                <div class="summary-value">$${data.summary.totalValue.toLocaleString()}</div>
              </div>
            ` : ''}
            ${data.summary.totalInvestments ? `
              <div class="summary-item">
                <div class="summary-label">Total Investments</div>
                <div class="summary-value">${data.summary.totalInvestments}</div>
              </div>
            ` : ''}
            ${data.summary.averageReturn ? `
              <div class="summary-item">
                <div class="summary-label">Average Return</div>
                <div class="summary-value">${data.summary.averageReturn}%</div>
              </div>
            ` : ''}
            ${data.summary.riskLevel ? `
              <div class="summary-item">
                <div class="summary-label">Risk Level</div>
                <div class="summary-value">${data.summary.riskLevel}</div>
              </div>
            ` : ''}
          </div>
        </div>
        ` : ''}
        
        <table class="data-table">
          <thead>
            <tr>
              ${Object.keys(data.data[0] || {}).map(key => 
                `<th>${key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</th>`
              ).join('')}
            </tr>
          </thead>
          <tbody>
            ${data.data.map(row => `
              <tr>
                ${Object.values(row).map(value => `<td>${value}</td>`).join('')}
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <div class="footer">
          <p>This report was generated by Global Edge Platform</p>
          <p>For questions, contact: info@globalnext.rocks</p>
        </div>
      </body>
      </html>
    `;
    
    return html;
  }

  // Download CSV file
  static downloadCSV(csvContent: string, filename: string): void {
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Download PDF file (using HTML to PDF conversion)
  static downloadPDF(htmlContent: string, filename: string): void {
    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.html`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

// Mock data generators for different report types
export const mockReportData = {
  portfolioSummary: {
    title: 'Portfolio Summary Report',
    generatedAt: new Date().toISOString(),
    summary: {
      totalValue: 125000,
      totalInvestments: 8,
      averageReturn: 12.5,
      riskLevel: 'Medium'
    },
    data: [
      { asset: 'Shanghai-LA Container', value: 45000, return: '12.5%', risk: 'Medium', status: 'Active' },
      { asset: 'Miami Office Building', value: 35000, return: '8.2%', risk: 'Low', status: 'Active' },
      { asset: 'Electronics Inventory', value: 25000, return: '15.1%', risk: 'High', status: 'Active' },
      { asset: 'Gold Vault Storage', value: 20000, return: '6.8%', risk: 'Low', status: 'Active' }
    ]
  },

  assetPerformance: {
    title: 'Asset Performance Report',
    generatedAt: new Date().toISOString(),
    summary: {
      totalValue: 125000,
      averageReturn: 10.65,
      bestPerformer: 'Electronics Inventory',
      worstPerformer: 'Gold Vault Storage'
    },
    data: [
      { asset: 'Electronics Inventory', current_value: 25000, initial_value: 22000, return: '15.1%', period: '6 months' },
      { asset: 'Shanghai-LA Container', current_value: 45000, initial_value: 42000, return: '12.5%', period: '4 months' },
      { asset: 'Miami Office Building', current_value: 35000, initial_value: 34000, return: '8.2%', period: '8 months' },
      { asset: 'Gold Vault Storage', current_value: 20000, initial_value: 19800, return: '6.8%', period: '3 months' }
    ]
  },

  transactionHistory: {
    title: 'Transaction History Report',
    generatedAt: new Date().toISOString(),
    data: [
      { date: '2024-12-15', type: 'Investment', asset: 'Shanghai-LA Container', amount: 5000, status: 'Completed' },
      { date: '2024-12-14', type: 'Dividend', asset: 'Miami Office Building', amount: 250, status: 'Completed' },
      { date: '2024-12-13', type: 'Investment', asset: 'Electronics Inventory', amount: 3000, status: 'Completed' },
      { date: '2024-12-12', type: 'Withdrawal', asset: 'Gold Vault Storage', amount: 1000, status: 'Completed' },
      { date: '2024-12-11', type: 'Investment', asset: 'Shanghai-LA Container', amount: 2000, status: 'Completed' }
    ]
  },

  riskAnalysis: {
    title: 'Risk Analysis Report',
    generatedAt: new Date().toISOString(),
    summary: {
      overallRisk: 'Medium',
      diversificationScore: 75,
      volatilityIndex: 12.3
    },
    data: [
      { asset: 'Electronics Inventory', risk_level: 'High', volatility: 18.5, correlation: 0.7, recommendation: 'Monitor closely' },
      { asset: 'Shanghai-LA Container', risk_level: 'Medium', volatility: 12.3, correlation: 0.4, recommendation: 'Stable' },
      { asset: 'Miami Office Building', risk_level: 'Low', volatility: 6.8, correlation: 0.2, recommendation: 'Safe' },
      { asset: 'Gold Vault Storage', risk_level: 'Low', volatility: 4.2, correlation: -0.1, recommendation: 'Hedge asset' }
    ]
  },

  taxReport: {
    title: 'Tax Report',
    generatedAt: new Date().toISOString(),
    summary: {
      totalGains: 8500,
      totalLosses: 1200,
      netGains: 7300,
      estimatedTax: 1825
    },
    data: [
      { asset: 'Shanghai-LA Container', gains: 3000, losses: 0, holding_period: '4 months', tax_rate: '25%' },
      { asset: 'Miami Office Building', gains: 2800, losses: 0, holding_period: '8 months', tax_rate: '20%' },
      { asset: 'Electronics Inventory', gains: 3000, losses: 0, holding_period: '6 months', tax_rate: '25%' },
      { asset: 'Gold Vault Storage', gains: 200, losses: 0, holding_period: '3 months', tax_rate: '25%' },
      { asset: 'Failed Investment', gains: 0, losses: 1200, holding_period: '2 months', tax_rate: '25%' }
    ]
  }
};
