name: Deploy Global Edge Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write   # Required for OIDC
  contents: read
  pull-requests: write

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Determine environment based on branch or manual input
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: ${{ !github.event.inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            dist/
            node_modules/

  # Deploy to Azure
  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    if: always() && (needs.build-and-test.result == 'success' || needs.build-and-test.result == 'skipped')
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        if: needs.build-and-test.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Install Azure Developer CLI
        uses: Azure/setup-azd@v1
        with:
          enable-cli-debug-logs: false

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        run: |
          echo "AZURE_ENV_NAME=${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV
          echo "AZURE_LOCATION=East US" >> $GITHUB_ENV

      - name: Initialize Azure Developer CLI
        run: |
          azd config set platform.type azd
          azd config set platform.azure.subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Provision infrastructure
        run: |
          azd provision --environment ${{ needs.determine-environment.outputs.environment }} --no-prompt
        continue-on-error: false

      - name: Build and push container images
        run: |
          # Build web application image
          docker build -t global-edge-web:latest -f Dockerfile .
          
          # Build API application image  
          docker build -t global-edge-api:latest -f Dockerfile.api .
          
          # Tag for Azure Container Registry (if using ACR)
          # docker tag global-edge-web:latest ${{ env.ACR_LOGIN_SERVER }}/global-edge-web:latest
          # docker tag global-edge-api:latest ${{ env.ACR_LOGIN_SERVER }}/global-edge-api:latest

      - name: Deploy applications
        run: |
          azd deploy --environment ${{ needs.determine-environment.outputs.environment }} --no-prompt
        continue-on-error: false

      - name: Run database migrations
        run: |
          ./scripts/migrate.sh ${{ needs.determine-environment.outputs.environment }}
        continue-on-error: false

      - name: Run post-deployment checks
        run: |
          ./scripts/post_deploy_check.sh ${{ needs.determine-environment.outputs.environment }}
        continue-on-error: false

      - name: Get deployment URLs
        id: get-urls
        run: |
          WEB_URL=$(azd env get-values --environment ${{ needs.determine-environment.outputs.environment }} --output json | jq -r '.WEB_URL // "Not available"')
          API_URL=$(azd env get-values --environment ${{ needs.determine-environment.outputs.environment }} --output json | jq -r '.API_URL // "Not available"')
          echo "web_url=$WEB_URL" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Comment deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🚀 Deployment Status')
            );
            
            const body = `🚀 **Deployment Status**
            
            **Environment:** ${{ needs.determine-environment.outputs.environment }}
            **Status:** ✅ Successfully deployed
            
            **URLs:**
            - 🌐 Web App: ${{ steps.get-urls.outputs.web_url }}
            - 🔌 API: ${{ steps.get-urls.outputs.api_url }}
            
            **Deployment Details:**
            - 📦 Infrastructure: Provisioned
            - 🚀 Applications: Deployed  
            - 🗄️ Database: Migrated
            - ✅ Health Checks: Passed
            
            ---
            *Deployed at: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Security and compliance checks
  security-scan:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment == 'prod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Cleanup on failure
  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: failure() && needs.determine-environment.outputs.environment == 'dev'
    steps:
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Cleanup failed deployment
        run: |
          echo "Cleaning up failed deployment for environment: ${{ needs.determine-environment.outputs.environment }}"
          # Add cleanup logic here if needed
